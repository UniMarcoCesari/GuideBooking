Elenco degli argomenti da scegliere di trattare nella presentazione
1) Indice della presentazione (obbligatorio)
2) Applicazione del principio di separazione modello-vista al progetto
3) Applicazione di al più due pattern GRASP sulle classi concettuali
4) Applicazione di al più due principi SOLID sulle classi del progetto
5) Applicazione di al più due pattern GoF sulle classi del progetto
6) Testing di al più un metodo o classe, e di al più una funzionalità o requisito,
evidenziando quali tipologie di testing sono state applicate e i casi di test derivati
7) Rifattorizzazione di al più un metodo o classe del progetto, evidenziando quali
pattern di Refactoring sono stati applicati



MODELLO VISTA

Spostare logica da LoginFrame a login controller permette di dividere correttamente responsabilita, mvc ecc

View prima 

############################################################
} else if (verifica == 1) { //PRE-configuratore
            dispose();
            new NewPasswordConf(username, "configuratore").setVisible(true);
        } else if (verifica == 2) { //volontario
            dispose();
            new PannelloVolontario(username).setVisible(true); // Pass username
        } else if (verifica == 3) { //preVolontario
            dispose();
            new NewPasswordConf(username, "volontario").setVisible(true);
        } else if (verifica == 4) { //volontario cancellato
            JOptionPane.showMessageDialog(this, "Utente cancellato", "Errore", JOptionPane.ERROR_MESSAGE);
            dispose();
            new LoginFrame().setVisible(true);
        } else if (verifica == 5) { // fruitore
            dispose();
            new PannelloFruitore(username).setVisible(true);
        }
#####################################################################

view ora 

#####################################################################
loginButton.addActionListener(_ -> {
            loginController.tentaLogin();
        });
#####################################################################




SOLID - 1/2
Dependency Inversion Principle (DIP): Far dipendere LoginController dall'interfaccia ILoginView invece che dalla classe concreta LoginFrame.